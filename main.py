import telebot
import atexit
import json
import os
import time
import datetime
from datetime import timedelta
import random
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from telebot import types
import pytz



token='YOUR TOKEN'
my_timezone = pytz.timezone('Asia/Irkutsk')


bot = telebot.TeleBot(token)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∞–π–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —á–∞—Ç–∞
ADM = yourIDadm # –¥–ª—è /s
chat_id = yourchat_id # –¥–ª—è /s
CONSOLE = -1002098012390



def load_calendar():
    try:
        with open('calendar.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
def save_calendar(calendar):
    with open('calendar.json', 'w', encoding='utf-8') as f:
        json.dump(calendar, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
calendar = load_calendar()
print(calendar)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
def on_start():
  print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. üôÑ")
  response = f"üìå| –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
  bot.send_message(CONSOLE, response)

on_start()


def on_stop():
  print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω")
  response = f"üìå| –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω"
  bot.send_message(CONSOLE, response)


@atexit.register
def exit_handler():
  on_stop()


bot.skip_pending = True


# –ú–µ—Å—è—Ü–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
months_of_year = {
    "01": "–Ø–Ω–≤–∞—Ä—è",
    "02": "–§–µ–≤—Ä–∞–ª—è",
    "03": "–ú–∞—Ä—Ç–∞",
    "04": "–ê–ø—Ä–µ–ª—è",
    "05": "–ú–∞—è",
    "06": "–ò—é–Ω—è",
    "07": "–ò—é–ª—è",
    "08": "–ê–≤–≥—É—Å—Ç–∞",
    "09": "–°–µ–Ω—Ç—è–±—Ä—è",
    "10": "–û–∫—Ç—è–±—Ä—è",
    "11": "–ù–æ—è–±—Ä—è",
    "12": "–î–µ–∫–∞–±—Ä—è"
}



days_of_week = {
    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "wednesday": "–°—Ä–µ–¥–∞",
    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "saturday": "–°—É–±–±–æ—Ç–∞",
    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
days_mapping = {
    "–ø–Ω": "monday",
    "–≤—Ç": "tuesday",
    "—Å—Ä": "wednesday",
    "—á—Ç": "thursday",
    "–ø—Ç": "friday",
    "—Å–±": "saturday",
    "–≤—Å": "sunday"
}



# –ë–ª–æ–∫ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
def check_cooldown(bot, message, game, cooldown_time=300):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, telebot.TeleBot)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param game: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'calendar')
    :param cooldown_time: –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç)
    :return: True, –µ—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª, –∏–Ω–∞—á–µ False
    """
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫—É–ª–¥–∞—É–Ω–∞–º–∏
    cooldown_file = 'cooldown.json'

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
    try:
        with open(cooldown_file, 'r') as file:
            timers = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        timers = {}

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.datetime.now()

    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    if game in timers:
        chat_id = str(message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id in timers[game]:
            last_time = datetime.datetime.strptime(timers[game][chat_id], "%Y-%m-%d %H:%M:%S")
            time_difference = current_time - last_time

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –¥–æ –∫—É–ª–¥–∞—É–Ω–∞ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª
            if time_difference.total_seconds() < cooldown_time:
                remaining_time_seconds = cooldown_time - time_difference.total_seconds()

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç timedelta –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                remaining_time = timedelta(seconds=remaining_time_seconds)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                remaining_time_str = str(remaining_time).split(".")[0]  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã

                bot.reply_to(message, text=f'‚ùå| –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞! –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time_str}')
                return False  # –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω

    # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    if game not in timers:
        timers[game] = {}

    timers[game][chat_id] = current_time.strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(cooldown_file, 'w') as file:
        json.dump(timers, file, indent=4)

    return True  # –ö—É–ª–¥–∞—É–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω


def check_cooldown_call(bot, message, game, cooldown_time=15):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, telebot.TeleBot)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param game: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'calendar')
    :param cooldown_time: –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç)
    :return: True, –µ—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª, –∏–Ω–∞—á–µ False
    """
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫—É–ª–¥–∞—É–Ω–∞–º–∏
    cooldown_file = 'cooldown.json'

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
    try:
        with open(cooldown_file, 'r') as file:
            timers = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        timers = {}

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.datetime.now()

    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    if game in timers:
        chat_id = str(message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id in timers[game]:
            last_time = datetime.datetime.strptime(timers[game][chat_id], "%Y-%m-%d %H:%M:%S")
            time_difference = current_time - last_time

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –¥–æ –∫—É–ª–¥–∞—É–Ω–∞ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª
            if time_difference.total_seconds() < cooldown_time:
                remaining_time_seconds = cooldown_time - time_difference.total_seconds()

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç timedelta –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                remaining_time = timedelta(seconds=remaining_time_seconds)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                remaining_time_str = str(remaining_time).split(".")[0]  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã

                return False  # –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω

    # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    if game not in timers:
        timers[game] = {}

    timers[game][chat_id] = current_time.strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(cooldown_file, 'w') as file:
        json.dump(timers, file, indent=4)

    return True  # –ö—É–ª–¥–∞—É–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω


# –ë–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

def send_console(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id
    chat_type = message.chat.type
    chat_name = message.chat.title
    location = message.location
    command = message.text.split()[0]
    response = f"‚ÄºÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É {command}!"
    response += f"\nüë©üèª‚Äçü¶±| ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
    response += f"\nüëï| –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}"
    response += f"\nüìõ| –ò–º—è: {first_name}"
    response += f"\nüìõ| –§–∞–º–∏–ª–∏—è: {last_name}"
    response += f"\nüíª| ID —á–∞—Ç–∞: {chat_id}"
    response += f"\nüì¶| –¢–∏–ø —á–∞—Ç–∞: {chat_type}"
    response += f"\n‚úÖ| –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat_name}"
    response += f"\nüó∫Ô∏è| –õ–æ–∫–∞—Ü–∏—è: {location}"

    bot.send_message(CONSOLE, response)


# –ë–ª–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–∞–Ω–¥

def update_command_count(command_name):

    try:
        with open('count.json', 'r') as file:
            try:
                data = json.load(file)
            except json.JSONDecodeError:
                data = {}
    except FileNotFoundError:
        data = {}

    count = data.get(command_name, 0)
    count += 1
    data[command_name] = count

    with open('count.json', 'w') as file:
        json.dump(data, file, indent=4)

    return count


# –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    try:
        with open("admins.json", "r", encoding="utf-8") as f:  # –î–æ–±–∞–≤–∏–ª–∏ encoding="utf-8"
            data = json.load(f)
            admins = data.get("admins", {})

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ JSON
            user_id_str = str(user_id)
            return user_id_str in admins

    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: –§–∞–π–ª admins.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ admins.json.")
        return False

def is_vladel_message(message):

    user_id = message.from_user.id
    return user_id == ADM

# –ë–ª–æ–∫ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏

my_timezone = pytz.timezone('Asia/Irkutsk')

def send_message():

    with open('citates.json', 'r', encoding='utf-8') as file:
        citates = json.load(file)

    citates_list = list(citates.values())
    random_citate = random.choice(citates_list)

    message = f"{random_citate}"

    bot.send_message(chat_id, message, parse_mode='Markdown')


scheduler = BackgroundScheduler(timezone=my_timezone)

scheduler.add_job(
    send_message,
    CronTrigger(hour='12', minute='0', second='0', timezone='Asia/Irkutsk'),
    id='send_message_job'
)

scheduler.start()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏

@bot.message_handler(commands=['id'])
def get_user_id(message):
    send_console(message)
    user_id = message.from_user.id
    if is_admin(user_id):
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            bot.reply_to(message, f"‚úÖ| ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username}: {user_id}")
        else:
            bot.reply_to(message, "‚ùå| –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π ID –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.")


@bot.message_handler(commands=['chatid'])
def send_chat_id(message):
    send_console(message)
    user_id = message.from_user.id
    if is_admin(user_id):
        chat_id = message.chat.id
        bot.send_message(chat_id, f"‚úÖ| Chat_id —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")

@bot.message_handler(commands=['clear'])
def clear_cooldown(message):
    send_console(message)
    user_id = message.from_user.id
    if is_admin(user_id):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –Ω–∞ –≥–æ–¥ —Ä–∞–Ω–µ–µ).
        """
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫—É–ª–¥–∞—É–Ω–∞–º–∏
        cooldown_file = 'cooldown.json'

        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
        try:
            with open(cooldown_file, 'r', encoding='utf-8') as file:
                timers = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            bot.reply_to(message, "‚ùå|  –§–∞–π–ª —Å –∫—É–ª–¥–∞—É–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            return

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.datetime.now()

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –∏ —á–∞—Ç–∞–º
        for game, chats in timers.items():
            for chat_id, last_used in chats.items():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                last_used_time = datetime.datetime.strptime(last_used, "%Y-%m-%d %H:%M:%S")
                # –£–º–µ–Ω—å—à–∞–µ–º –¥–∞—Ç—É –Ω–∞ –≥–æ–¥
                new_last_used_time = last_used_time - timedelta(days=365)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
                timers[game][chat_id] = new_last_used_time.strftime("%Y-%m-%d %H:%M:%S")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(cooldown_file, 'w', encoding='utf-8') as file:
            json.dump(timers, file, indent=4, ensure_ascii=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
        bot.reply_to(message, "‚úÖ –ö—É–ª–¥–∞—É–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")


@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    send_console(message)
    user_id = message.from_user.id
    if is_admin(user_id):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            with open('admins.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ data —Å–ª–æ–≤–∞—Ä–µ–º
                if isinstance(data, dict):
                    admins = data.get("admins", {})
                else:
                    admins = {}  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        except (json.JSONDecodeError, ValueError):
            admins = {}  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()

        if len(args) != 4:
            bot.reply_to(message, "‚ùå| –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addadmin <user_id> <–∏–º—è> <–≥—Ä—É–ø–ø–∞>\n–ü—Ä–∏–º–µ—Ä: /addadmin 1746611992 –°–ª–∞–≤–∞ –ò–°23–ê")
            return

        try:
            user_id = int(args[1])  # –ü–æ–ª—É—á–∞–µ–º ID
        except ValueError:
            bot.reply_to(message, "‚ùå| –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        username = args[2]  # –ò–º—è
        group = args[3]     # –ì—Ä—É–ø–ø–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º


        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if user_id not in admins:
            admins[user_id] = f"{username} - {group}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ID - –ò–º—è - –ì—Ä—É–ø–ø–∞"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è
            data = {"admins": admins}
            with open('admins.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            bot.reply_to(message, f"‚úÖ| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –≥—Ä—É–ø–ø–æ–π {group}.")
        else:
            bot.reply_to(message, f"‚úÖ| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")



@bot.message_handler(commands=['removeadmin'])
def remove_admin(message):
    send_console(message)
    user_id = message.from_user.id
    if is_admin(user_id):

        try:
            with open('admins.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, dict):
                    admins = data.get("admins", {})
                else:
                    admins = {}
        except (json.JSONDecodeError, ValueError):
            admins = {}

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()

        if len(args) != 2:
            bot.reply_to(message, "‚ùå| –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removeadmin <user_id>\n–ü—Ä–∏–º–µ—Ä: /removeadmin 1746611992")
            return

        identifier = args[1]




        if identifier.isdigit():
            user_id = identifier
            if user_id in admins:
                del admins[user_id]
                bot.reply_to(message, f"‚úÖ| –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {user_id} —É–¥–∞–ª—ë–Ω.")
            else:
                bot.reply_to(message, f"‚ùå| –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.reply_to(message, "‚ùå| –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


        data = {"admins": admins}
        with open('admins.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

@bot.message_handler(func=lambda message: message.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    send_console(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    update_command_count('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

    if not check_cooldown(bot, message, 'statistika'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        with open('admins.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, dict):
                admins = data.get("admins", {})
            else:
                admins = {}
    except (json.JSONDecodeError, ValueError):
        admins = {}

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"

    if admins:
        response += "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
        for user_id, info in admins.items():
            response += f"   üÜî {user_id} | üë§ {info}\n"



    else:
        response += "   ‚ùå| –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥
    try:
        with open('count.json', 'r', encoding='utf-8') as f:
            counts = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        counts = {}

    if counts:
        response2 = "\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n\n"
        for command, count in counts.items():
            response2 += f"   ‚öôÔ∏è {command}: {count}\n"
        response2 += f"\n\n‚úèÔ∏è –ß–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –≤ –±–æ—Ç–µ\n\nüßì –ò–°23–∞ (16–Ω–æ—è 2024) —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –Ω–∞ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É (v1) - 439\n\nüë¶ GroupSchedBot (16 —Ñ–µ–≤—Ä–∞–ª—è 2025) —Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø (v2) - 1310"

    else:
        response2 = "\n   ‚ùå| –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥.\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message, response)
    bot.reply_to(message, response2)


@bot.message_handler(commands=['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
def schedule_command(message):
    send_console(message)

    user_id = message.from_user.id
    if is_admin(user_id):
        chat_id = message.chat.id

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()

        template_button = types.InlineKeyboardButton("–®–∞–±–ª–æ–Ω", callback_data='template')
        custom_button = types.InlineKeyboardButton("–ö–∞—Å—Ç–æ–º", callback_data='custom')

        markup.add(template_button, custom_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(chat_id,
                         "üë∑‚Äç‚ôÇÔ∏è–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.\n\n"
                         "üìÉ–®–∞–±–ª–æ–Ω - –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –¥–µ–ª–∞–µ—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
                         "‚úèÔ∏è–ö–∞—Å—Ç–æ–º - –í–∞—à —Å—Ç–∏–ª—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –±–æ—Ç –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª.\n\nP.S. –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫ - 15—Å–µ–∫.",
                         reply_markup=markup)
        update_command_count('/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')


# –ú–∞—Å—Ç–µ—Ä —Å—Ç–∞—Ä—Ç–∞

@bot.message_handler(commands=['start'])
def send_welcome(message):
    send_console(message)
    markup = types.InlineKeyboardMarkup()



    add_bot_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å‚ùì", callback_data='add_bot')
    status_button = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—ÅüìÉ", callback_data='status')


    markup.add(add_bot_button, status_button)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–í—ã –≤—ã–∑–≤–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    update_command_count('/start')


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback_data
    if call.data == 'add_bot':
        game = 'add_bot'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        handle_add_bot(chat_id)

    elif call.data == 'status':
        game = 'status'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

        try:
            with open('podpiska.json', 'r', encoding='utf-8') as f:
                data = json.load(f)

            user_data = data.get(str(chat_id))
            if user_data:
                status = user_data.get("status")
                expiry_date_str = user_data.get("expiry_date")

                if status == "active" and expiry_date_str:
                    expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d")
                    current_date = datetime.datetime.now()

                    if current_date <= expiry_date:
                        remaining_time = expiry_date - current_date
                        days_remaining = remaining_time.days
                        hours_remaining = remaining_time.seconds // 3600
                        minutes_remaining = (remaining_time.seconds // 60) % 60

                        message = (f"‚úÖ| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n"
                                   f"–û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω. {hours_remaining} —á. {minutes_remaining} –º–∏–Ω.")
                    else:
                        message = "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞."
                else:
                    message = "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."
            else:
                message = ("‚ùå| –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                           "–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ. –î–ª—è —ç—Ç–æ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        except Exception as e:
            message = f"‚ùå| –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, message)

    elif call.data == 'template':
        game = 'template'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user_id = call.from_user.id
        if is_admin(user_id):
            handle_template(call)
    elif call.data == 'custom':
        game = 'custom'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        handle_custom(chat_id)
    elif call.data == 'set_schedule':
        game = 'set_schedule'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user_id = call.from_user.id
        if is_admin(user_id):
            handle_set_schedule(call)
    elif call.data == 'end_schedule':
        game = 'end_schedule'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user_id = call.from_user.id
        if is_admin(user_id):
            handle_end_schedule(chat_id)
    elif call.data == 'del_schedule':
        game = 'del_schedule'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user_id = call.from_user.id
        if is_admin(user_id):
            handle_del_schedule(call)
    elif call.data == 'add_another':
        game = 'add_another'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user_id = call.from_user.id
        if is_admin(user_id):
            handle_add_another(call)
    elif call.data == 'red_schedule':
        game = 'red_schedule'  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not check_cooldown_call(bot, call.message, game):
            return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user_id = call.from_user.id
        if is_admin(user_id):
            handle_red_schedule(call)

def handle_add_bot(chat_id):
    bot.send_message(chat_id, "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞*\n\n"
                               "1. üßë‚Äç‚öñÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å _–í–ª–∞–¥–µ–ª—å—Ü—É_ (@slepta)Ô∏è\n\n"
                               "2. üìÉ–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥—É _–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã_ (–ø—Ä–∞–≤–∞ –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã)\n\n"
                               "3. ü§ñ–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ @slepta –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
                               "4. üíµ–í—ã –ø–æ–ª—É—á–∏—Ç–µ **–ë–ï–°–ü–õ–ê–¢–ù–û** –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–µ–¥–µ–ª—é. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –∫–æ—Ç–æ—Ä–æ–π –µ—Å–ª–∏ –≤–∞—Å –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç - –æ–ø–ª–∞—Ç–∏—Ç—å **–ü–û–î–ü–ò–°–ö–£**\n\n"
                               "P.S. –æ–ø–ª–∞—Ç–∞ –≤ –ª—Å —É @slepta",
                               parse_mode='Markdown')

def handle_template(call):
    bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    bot.send_message(call.message.chat.id,
                     "–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
                     "üï∞13:40-14:50 üìó1–Ω –ú–î–ö 03.01 | 212\n2–Ω –ú–î–ö 02.02 | 212\n"
                     "üï∞14:55-16:05 üìó –§–∏–ª–æ—Å–æ—Ñ–∏—è | 216\n"
                     "üï∞16:25-17:35 üìó –ú–î–ö 02.03 | 214–∞\n"
                     "üï∞17:40-18:50 üìó –§–∏–∑-—Ä–∞ | –∑/–∑–∞–ª\n\n–ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —É –ê–¥–º.üëë\n"
                     "\n‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï\n–Ω–∞ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∏–∫—Ç–æ –ª–∏—à–Ω–∏–π –≤ —á–∞—Ç –ø–∏—Å–∞—Ç—å –Ω–µ –¥–æ–ª–∂–µ–Ω! –ò–Ω–∞—á–µ –±–æ—Ç –±—É–¥–µ—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n(–∫–æ–º–∞–Ω–¥–∞) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ—ã)"
                     )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data='set_schedule'))
    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", callback_data='del_schedule'))
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É", callback_data='red_schedule'))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def handle_custom(chat_id):
    bot.send_message(chat_id, "‚ùå| –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–Ω–∞–≤–µ—Ä–Ω–æ–µ)")


def handle_set_schedule(call):
    chat_id = call.message.chat.id

    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:40-14:50):")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —á–∞—Ç–∞)
    bot.register_next_step_handler(call.message, get_subject, chat_id)

def handle_end_schedule(chat_id):
    bot.send_message(chat_id, "‚úÖ| –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")

def handle_del_schedule(call):  # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ call
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ):\n–ü–Ω - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n–í—Ç - –≤—Ç–æ—Ä–Ω–∏–∫\n–°—Ä - —Å—Ä–µ–¥–∞\n–ß—Ç - —á–µ—Ç–≤–µ—Ä–≥\n–ü—Ç - –ø—è—Ç–Ω–∏—Ü–∞\n–°–± - —Å—É–±–±–æ—Ç–∞\n–í—Å - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:")
    bot.register_next_step_handler(call.message, ask_for_pair_number, chat_id)

def handle_add_another(call):  # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ call
    chat_id = call.message.chat.id  # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ call
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:40-14:50):")
    bot.register_next_step_handler(call.message, get_subject, chat_id)

def handle_red_schedule(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ):\n–ü–Ω - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n–í—Ç - –≤—Ç–æ—Ä–Ω–∏–∫\n–°—Ä - —Å—Ä–µ–¥–∞\n–ß—Ç - —á–µ—Ç–≤–µ—Ä–≥\n–ü—Ç - –ø—è—Ç–Ω–∏—Ü–∞\n–°–± - —Å—É–±–±–æ—Ç–∞\n–í—Å - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:")
    bot.register_next_step_handler(call.message, ask_for_pair_to_edit, chat_id)

def ask_for_pair_to_edit(message, chat_id):
    day = message.text.lower().strip()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–µ–Ω—å: {day}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ü—Ä–∏–≤–æ–¥–∏–º chat_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞–º
    str_chat_id = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    if day in days_mapping:
        full_day = days_mapping[day]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
    else:
        bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å.")
        return

    if str_chat_id in calendar:
        if full_day in calendar[str_chat_id]:
            pairs = calendar[str_chat_id][full_day]
            print(f"–ü–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å {full_day}: {pairs}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if pairs:
                response = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                for index, pair in enumerate(pairs, start=1):
                    response += f"{index}. {pair}\n"
                bot.send_message(chat_id, response + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_pair, full_day, str_chat_id)
            else:
                bot.send_message(chat_id, "‚ùå| –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        else:
            bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
    else:
        bot.send_message(chat_id, "‚ùå| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
def edit_pair(message, day, chat_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –∏ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        pair_number = int(message.text) - 1
        if chat_id in calendar and day in calendar[chat_id]:
            pairs = calendar[chat_id][day]
            if 0 <= pair_number < len(pairs):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ
                current_pair = pairs[pair_number]
                bot.send_message(chat_id, f"‚ùì| –¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞: {current_pair}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:40-14:50):")
                bot.register_next_step_handler(message, get_new_subject, pair_number, day, chat_id)
            else:
                bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã.")
        else:
            bot.send_message(chat_id, "‚ùå| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        bot.send_message(chat_id, "‚ùå| –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã.")

def get_new_subject(message, pair_number, day, chat_id):
    new_time = message.text
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã (–∫—Ä–∞—Ç–∫–æ):")
    bot.register_next_step_handler(message, finalize_edit, pair_number, day, new_time, chat_id)

def finalize_edit(message, pair_number, day, new_time, chat_id):
    new_subject = message.text
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:")
    bot.register_next_step_handler(message, update_schedule, pair_number, day, new_time, new_subject, chat_id)

def update_schedule(message, pair_number, day, new_time, new_subject, chat_id):
    new_room = message.text
    new_entry = f"üï∞{new_time} üìó{new_subject} | {new_room}"

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    calendar[chat_id][day][pair_number] = new_entry  # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    save_calendar(calendar)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='add_another'),
               types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='red_schedule'),
               types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='del_schedule'),
               types.InlineKeyboardButton("–ö–æ–Ω–µ—Ü", callback_data='end_schedule'))
    bot.send_message(chat_id, "‚úÖ| –ü–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –¥–µ–π—Å—Ç–≤–∏–µ?", reply_markup=markup)

def ask_for_pair_number(message, chat_id):
    day = message.text.lower().strip()

    # –ü—Ä–∏–≤–æ–¥–∏–º chat_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞–º
    str_chat_id = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    if day in days_mapping:
        full_day = days_mapping[day]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
    else:
        bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id
    if str_chat_id in calendar and full_day in calendar[str_chat_id]:
        pairs = calendar[str_chat_id][full_day]
        if pairs:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            response = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            for index, pair in enumerate(pairs, start=1):
                response += f"{index}. {pair}\n"
            bot.send_message(chat_id, response + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, delete_pair, full_day, str_chat_id)
        else:
            bot.send_message(chat_id, "‚ùå| –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
    else:
        bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")

def delete_pair(message, day, chat_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        pair_number = int(message.text) - 1
        if chat_id in calendar and day in calendar[chat_id]:
            pairs = calendar[chat_id][day]
            if 0 <= pair_number < len(pairs):
                deleted_pair = pairs.pop(pair_number)  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É
                save_calendar(calendar)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='add_another'),
                           types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='red_schedule'),
                           types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='del_schedule'),
                           types.InlineKeyboardButton("–ö–æ–Ω–µ—Ü", callback_data='end_schedule'))
                bot.send_message(chat_id, f"‚úÖ| –ü–∞—Ä–∞ {deleted_pair} —É–¥–∞–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è?", reply_markup=markup)
            else:
                bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã.")
        else:
            bot.send_message(chat_id, "‚ùå| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        bot.send_message(chat_id, "‚ùå| –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã.")

def get_subject(message, chat_id):
    time = message.text
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã (–∫—Ä–∞—Ç–∫–æ):")
    bot.register_next_step_handler(message, get_room, time, chat_id)

def get_room(message, time, chat_id):
    subject = message.text
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:")
    bot.register_next_step_handler(message, finalize_schedule, time, subject, chat_id)

def finalize_schedule(message, time, subject, chat_id):
    room = message.text
    entry = f"üï∞{time} üìó{subject} | {room}"

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    bot.send_message(chat_id, "‚ùì| –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ):\n–ü–Ω - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n–í—Ç - –≤—Ç–æ—Ä–Ω–∏–∫\n–°—Ä - —Å—Ä–µ–¥–∞\n–ß—Ç - —á–µ—Ç–≤–µ—Ä–≥\n–ü—Ç - –ø—è—Ç–Ω–∏—Ü–∞\n–°–± - —Å—É–±–±–æ—Ç–∞\n–í—Å - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:")
    bot.register_next_step_handler(message, add_entry, entry, chat_id)

def add_entry(message, entry, chat_id):
    day = message.text.lower().strip()

    # –ü—Ä–∏–≤–æ–¥–∏–º chat_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞–º
    str_chat_id = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id
    if str_chat_id not in calendar:
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ chat_id
        calendar[str_chat_id] = {
            "monday": [],
            "tuesday": [],
            "wednesday": [],
            "thursday": [],
            "friday": [],
            "saturday": [],
            "sunday": []
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    if day in days_mapping:
        full_day = days_mapping[day]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
    else:
        bot.send_message(chat_id, "‚ùå| –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å.")
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    calendar[str_chat_id][full_day].append(entry)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    save_calendar(calendar)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–∞—Ä—É –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='add_another'),  types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='red_schedule'), types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='del_schedule') , types.InlineKeyboardButton("–ö–æ–Ω–µ—Ü", callback_data='end_schedule'))
    bot.send_message(chat_id, "‚úÖ| –ü–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É?", reply_markup=markup)



# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

@bot.message_handler(func=lambda message: message.text.lower() == "—Å—Ç–∞—Ç—É—Å")
def check_status(message):
    send_console(message)
    if not check_cooldown(bot, message, 'status'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    chat_id = message.chat.id
    update_command_count('—Å—Ç–∞—Ç—É—Å')
    try:
        with open('podpiska.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        user_data = data.get(str(chat_id))
        if user_data:
            status = user_data.get("status")
            expiry_date_str = user_data.get("expiry_date")

            if status == "active" and expiry_date_str:
                expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d")
                current_date = datetime.datetime.now()

                if current_date <= expiry_date:
                    remaining_time = expiry_date - current_date
                    days_remaining = remaining_time.days
                    hours_remaining = remaining_time.seconds // 3600
                    minutes_remaining = (remaining_time.seconds // 60) % 60

                    bot.send_message(chat_id,
                                     f"‚úÖ| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n"
                                     f"–û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω. {hours_remaining} —á. {minutes_remaining} –º–∏–Ω.")
                else:
                    bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            else:
                bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        else:
            bot.send_message(chat_id, "‚ùå| –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ. –î–ª—è —ç—Ç–æ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")

    except FileNotFoundError:
        bot.send_message(chat_id, "‚ùå| –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        bot.send_message(chat_id, "‚ùå| –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå| –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —á–∞—Ç –∞–π–¥–∏

@bot.message_handler(func=lambda message: message.text.startswith('–°—Ç–∞—Ä—Ç (') and message.text.endswith(')'))
def start_subscription(message):
    send_console(message)
    chat_id = message.chat.id
    if is_vladel_message(message):
        chat_id_str = message.text[7:-1]

        try:
            chat_id = int(chat_id_str)
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=30)
        expiry_date_str = expiry_date.strftime("%Y-%m-%d")

        try:

            with open('podpiska.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
        except FileNotFoundError:
            data = {}
        except json.JSONDecodeError:
            data = {}

        data[str(chat_id)] = {
            "status": "active",
            "expiry_date": expiry_date_str
        }

        with open('podpiska.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

        bot.send_message(message.chat.id, f"‚úÖ| –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –∞–π–¥–∏: {chat_id}.")
    else:
        bot.send_message(chat_id, "‚ùå| –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü)")


@bot.message_handler(commands=['s'])
def write_roles_handler(message):
    send_console(message)

    if message.from_user.id == ADM:

        if message.text.lower().startswith('/s'):

            text = message.text[len('/s'):].strip()

            if len(text) > 0:

                with open('send.json', 'w') as file:
                    data = {
                        'sms': text
                    }
                    json.dump(data, file)

            with open('send.json', 'r', encoding='utf-8') as json_file:
                data = json.load(json_file)

            bot.send_message(chat_id, f"{data['sms']}")

# –§–∞–Ω-–∫–æ–º–∞–Ω–¥–∞ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏

@bot.message_handler(func=lambda message: message.text.lower() == '—Ä–∞–Ω–¥–æ–º')
def random_voice(message):
    send_console(message)
    if not check_cooldown(bot, message, 'random'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    update_command_count('—Ä–∞–Ω–¥–æ–º')
    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    with open('podpiska.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    user_data = data.get(str(chat_id))
    if user_data:
        status = user_data.get("status")
        expiry_date_str = user_data.get("expiry_date")

        if status == "active" and expiry_date_str:
            expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d")
            current_date = datetime.datetime.now()

            if current_date <= expiry_date:
                current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                game = "random"
                with open('cooldown.json', 'r') as file:
                    timers = json.load(file)

                if str(game) in timers:
                    last_time = datetime.datetime.strptime(timers[str(game)], "%Y-%m-%d %H:%M:%S")

                    time_difference = datetime.datetime.now() - last_time

                    if time_difference.total_seconds() < 10:

                        remaining_time = datetime.timedelta(seconds=10 - time_difference.total_seconds())

                        remaining_time_datetime = datetime.datetime(1, 1, 1) + remaining_time

                        bot.reply_to(message, text=f'‚ùå| –ö—É–ª–¥–∞—É–Ω! –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time_datetime.strftime("%M:%S")} —Å–µ–∫—É–Ω–¥' )

                        pass

                        return
                timers[str(game)] = current_time
                with open('cooldown.json', 'w') as file:
                    json.dump(timers, file)

                music_folder = "musicrand"

                music_files = os.listdir(music_folder)

                random_music = random.choice(music_files)

                music_path = os.path.join(music_folder, random_music)

                chat = message.chat.id

                with open(music_path, 'rb') as music:
                    bot.send_audio(chat, music)
            else:
                bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
        else:
            bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        bot.send_message(chat_id,
                         "‚ùå| –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ. –î–ª—è —ç—Ç–æ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞

@bot.message_handler(func=lambda message: message.text.lower() == "–±–æ—Ç")
def handle_bot_command(message):
    send_console(message)
    update_command_count('–±–æ—Ç')
    if not check_cooldown(bot, message, 'bot'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    bot.send_message(message.chat.id, text='‚úÖ| –ù–∞ –º–µ—Å—Ç–µ')



# –ö–æ–º–∞–Ω–¥–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏")
def send_week_schedule(message):
    send_console(message)
    update_command_count('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏')
    if not check_cooldown(bot, message, 'raspisaniefull'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    with open('podpiska.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    user_data = data.get(str(chat_id))
    if user_data:
        status = user_data.get("status")
        expiry_date_str = user_data.get("expiry_date")

        if status == "active" and expiry_date_str:
            expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d")
            current_date = datetime.datetime.now()

            if current_date <= expiry_date:

                with open('calendar.json', 'r', encoding='utf-8') as file:
                    schedule_data = json.load(file)

                reply_text = "üß†| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"

                days_order = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
                for i in range(7):
                    day = days_order[i]
                    day_ru = days_of_week.get(day)
                    daily_schedule = schedule_data.get(str(chat_id), {}).get(day, [])
                    reply_text += f"\n\nüî•| {day_ru}:\n" + "\n".join(
                        daily_schedule) if daily_schedule else f"\n\nüìÖ| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_ru.lower()} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n"

                bot.reply_to(message, reply_text)

                with open('zameni.json', 'r', encoding='utf-8') as file:
                    zameni = json.load(file)
                bot.reply_to(message, text=f"\n\n‚ÅâÔ∏è| –ó–ê–ú–ï–ù–´\n\n‚úÖ| {zameni.get('zam', '–ù–µ—Ç –∑–∞–º–µ–Ω.')}")
            else:
                bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
        else:
            bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        bot.send_message(chat_id,
                         "‚ùå| –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ. –î–ª—è —ç—Ç–æ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")

@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ")
def handle_all_schedule_command(message):
    send_console(message)
    if not check_cooldown(bot, message, 'raspisanieold'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    bot.reply_to(message, "üì¢| –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.")

# –ö–æ–º–∞–Ω–¥–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def send_schedule1(message):
    send_console(message)
    update_command_count('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    if not check_cooldown(bot, message, 'raspisanie'):
        return  # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    chat_id = message.chat.id

    with open('podpiska.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    user_data = data.get(str(chat_id))
    if user_data:
        status = user_data.get("status")
        expiry_date_str = user_data.get("expiry_date")

        if status == "active" and expiry_date_str:
            expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d")
            current_date = datetime.datetime.now()

            if current_date <= expiry_date:
                current_time = datetime.datetime.now(my_timezone)
                current_timee = current_time.strftime("%Y-%m-%d %H:%M:%S")
                game = "main"    # –∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É

                current_date = datetime.datetime.now(tz=my_timezone)

                if current_date.hour == 0 and current_date.minute == 0:
                    current_date += datetime.timedelta(days=1)

                current_weekday = current_date.strftime("%A").lower()
                current_weekday_ru = days_of_week.get(current_weekday)

                if current_weekday_ru is None:
                    print("‚ùå| –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")
                else:
                    current_date_day = current_date.strftime("%d")
                    current_date_month = months_of_year[current_date.strftime("%m")]

                    reply_text = f"üî•| –î–µ–Ω—å: {current_weekday_ru}\nü•µ| –ß–∏—Å–ª–æ: {current_date_day} {current_date_month}"

                    with open('calendar.json', 'r', encoding='utf-8') as file:
                        schedule_data = json.load(file)

                    daily_schedule = schedule_data.get(str(chat_id), {}).get(current_weekday, [])
                    reply_text += "\n\n" + "\n".join(daily_schedule) if daily_schedule else "\n\nüìÖ| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

                    next_day = current_date + datetime.timedelta(days=1)
                    next_weekday = next_day.strftime("%A").lower()
                    next_weekday_ru = days_of_week.get(next_weekday)
                    next_day_schedule = schedule_data.get(str(chat_id), {}).get(next_weekday, [])

                    reply_text += f"\n\nüëâ| –ù–ê –ó–ê–í–¢–†–ê: {next_weekday_ru}\n\n" + "\n".join(next_day_schedule) if next_day_schedule else "\n\nüìÖ| –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

                bot.reply_to(message, reply_text)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                try:
                    with open('zameni.json', 'r', encoding='utf-8', errors='ignore') as file:
                        zameni = json.load(file)
                    chat_replacements = zameni.get(str(chat_id), {}).get('text', '–ù–µ—Ç –∑–∞–º–µ–Ω.')
                    bot.reply_to(message, text=f"\n\n‚ÅâÔ∏è| –ó–ê–ú–ï–ù–´\n\n‚úÖ| {chat_replacements}")
                except FileNotFoundError:
                    bot.reply_to(message, text='‚ùå| –§–∞–π–ª zameni.json –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                except json.JSONDecodeError:
                    bot.reply_to(message, text='‚ùå| –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ zameni.json.')
            else:
                bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
        else:
            bot.send_message(chat_id, "‚ùå| –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        bot.send_message(chat_id,
                         "‚ùå| –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ. –î–ª—è —ç—Ç–æ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ–Ω

@bot.message_handler(commands=['–∑–∞–º–µ–Ω—ã'])
def write_commands(message):
    send_console(message)
    update_command_count('/–∑–∞–º–µ–Ω—ã')
    user_id = message.from_user.id
    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞

    if is_admin(user_id):
        if message.text.lower().startswith('/–∑–∞–º–µ–Ω—ã'):
            text = message.text[len('/–∑–∞–º–µ–Ω—ã'):].strip()

            if len(text) > 0:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ zameni.json, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    with open('zameni.json', 'r', encoding='utf-8') as file:
                        data = json.load(file)
                except FileNotFoundError:
                    data = {}
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
                    data = {}
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    data = {}

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                data[str(chat_id)] = {
                    "text": text
                }

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
                with open('zameni.json', 'w', encoding='utf-8') as file:
                    json.dump(data, file, ensure_ascii=False, indent=4)

                response = '‚úÖ| –ü–æ–ª–µ —Å –∑–∞–º–µ–Ω–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
                bot.reply_to(message, response)

            else:
                response = '‚ùå| –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —Å –∑–∞–º–µ–Ω–∞–º–∏'
                bot.reply_to(message, response)



if __name__ == '__main__':
    bot.delete_webhook(drop_pending_updates=True)
    bot.infinity_polling()
